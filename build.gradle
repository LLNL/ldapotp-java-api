/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'meier3' at '6/25/15 10:44 AM' with Gradle 2.4
 *
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the distribution plugin to build tar files for building rpms
apply plugin: 'distribution'

def mainClass  = "gov.llnl.lc.stg.ldapotp.test.OTP_Authenticate"
def bundleDescription = "Java API for the LDAPOTP Client Libraries"

def specFileName = "${rootProject.name}" + ".spec"
def distFileName = "llnl-ldapotp-clt-java"
def buildDist    = 'build/dist'

// the location of resources this package depends on, and will include
def repoDist     = '../lc-jcommon/build/distributions/'
def depJarName   = 'LcCommon'

// In this section you declare where to find the dependencies of your project
// and in this case, all subprojects should be at the same level as this
// project (get jars from the projects build/libs directory)
repositories {

    // location of my jars
       flatDir {
       dirs "${repoDist}"
   }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // my dependent jars (see repos above, and leave off the .jar)
    compile name: "${depJarName}"
}

task makeDistro() {
  description 'create the dist subdirectory'
  println(" makeDistro" )
}

makeDistro << {
    def subdir = new File(project.buildDir, "dist")
    println("subdir: "+ subdir)

    if( !subdir.exists() ) {
        println("creating dist subdir")

        if(subdir.mkdirs()) {
            println("succeeded in making dist folder")

            if(subdir.exists()) {
                println("folder exists")
            } else {
                println("folder does not exist")
            }
        } else {
            println("failed to make folder")
        }
    } else {
        println("folder exists already")
    }
}

distributions {
    custom {
        baseName = distFileName
   String fname1 = "${rootProject.name}" + "-" + version + ".jar"
   String fname2 = "${rootProject.name}" + ".jar"
   String fromString = "${rootProject.libsDir}" + "/" +  fname1
        contents {
        
            from { 'src/dist' }
            from { "${buildDist}" }
        }
    }
}

customDistTar{
                compression = Compression.GZIP
                extension = 'tar.gz'
            }

task incrementBuildNumber  {
  description 'increment the artifactBuildNumber in the gradle.properties file, and update the version accordingly'
  version = artifactMajorVersion + "-" + artifactReleaseNumber + "-b" + artifactBuildNumber
}

incrementBuildNumber  << {
  //update the next version string, and persist it (save it back) during execution stage
  Properties props = new Properties()
  File propsFile = new File('gradle.properties')
  props.load(propsFile.newDataInputStream())
  Integer nextbuildnum = (((props.getProperty('artifactBuildNumber')) as BigDecimal) + 1 )
  // save it for use next time
  props.setProperty('artifactBuildNumber', nextbuildnum.toString())
  props.store(propsFile.newWriter(), null)
  props.load(propsFile.newDataInputStream())
  version = artifactMajorVersion + "-" + artifactReleaseNumber + "-b" + nextbuildnum.toString()
}

task renameJar (dependsOn: jar) {
 description 'copies and renames the jar file to the simple form in the distributions directory (needed for ldapotp-java-api)'  
 println( "renameJar - static")
}

renameJar << {
   println("renameJar - dynamic")
   String fname1 = "${rootProject.name}" + "-" + version + ".jar"
   String fname2 = "${rootProject.name}" + ".jar"
   String fromString = "${rootProject.libsDir}" + "/" +  fname1
   String toString = "${buildDist}"
   println "Copying from: " + fromString + ", to: " + toString
   copy {
   from fromString
   into toString
 //  rename(fname1, fname2)
   }
   copy {
   from "${repoDist}" + "/" + "${depJarName}" + ".jar"
   into toString + "/libs"
   }
}

// on every jar task, increment the build number, and fill in the manifest
jar {
  dependsOn incrementBuildNumber
  dependsOn makeDistro
    doFirst {
       manifest {
              attributes('Gradle-Version':  gradle.gradleVersion,
                'Built-JDK': System.getProperty('java.version'),
                 'Built-By':  System.getProperty('user.name'),
                  "Class-Path" : "/usr/share/java/" + "${rootProject.name}" + "/lib/LcCommon.jar",
                "Main-Class" :"${mainClass}",
               "Implementation-Vendor"  : "Lawrence Livermore National Laboratory",
                "Implementation-Title" :"${rootProject.name}",
                "Implementation-Version" : version, 
                "Bundle-License" : "GNU General Public License, version 2",
               "Bundle-Description" : "${bundleDescription}",
                "Built-Date" : new Date())               
        }
     }
    doLast {
      println "2. Renaming now, from ${rootProject.name}" + "-" + version + ".jar to ${rootProject.name}" + ".jar"
      renameJar
    }
}

task sourcesJar(type: Jar, dependsOn: classes){
    classifier = 'sources'
    from sourceSets.main.allSource
        doFirst {
        manifest {
              attributes('Gradle-Version':  gradle.gradleVersion,
                'Built-JDK': System.getProperty('java.version'),
                 'Built-By':  System.getProperty('user.name'),
                "Implementation-Vendor"  : "Lawrence Livermore National Laboratory",
                "Implementation-Title" :"${rootProject.name}",
                "Implementation-Version" : version, 
                "Bundle-License" : "GNU General Public License, version 2",
               "Bundle-Description" : "${bundleDescription}",
                "Built-Date" : new Date())               
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
       doFirst {
        manifest {
               attributes('Gradle-Version':  gradle.gradleVersion,
                'Built-JDK': System.getProperty('java.version'),
                 'Built-By':  System.getProperty('user.name'),
                "Implementation-Vendor"  : "Lawrence Livermore National Laboratory",
                "Implementation-Title" :"${rootProject.name}",
                "Implementation-Version" : version, 
                "Bundle-License" : "GNU General Public License, version 2",
               "Bundle-Description" : "${bundleDescription}",
                 "Built-Date" : new Date())               
        }
    }
}

task fatJar(type: Jar, dependsOn: classes) {
  classifier = 'all'
// dependsOn incrementBuildNumber
    doFirst {
        manifest {
              attributes('Gradle-Version':  gradle.gradleVersion,
                'Built-JDK': System.getProperty('java.version'),
                 'Built-By':  System.getProperty('user.name'),
                 "Class-Path" : "/usr/share/java/" + "${rootProject.name}" + "/lib/LcCommon.jar",
                "Main-Class" :"${mainClass}",
                "Implementation-Vendor"  : "Lawrence Livermore National Laboratory",
                "Implementation-Title" :"${rootProject.name}",
                "Implementation-Version" : version, 
                "Bundle-License" : "GNU General Public License, version 2",
               "Bundle-Description" : "${bundleDescription}",
                "Built-Date" : new Date())               
        }
    }
    from sourceSets.main.allSource
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

javadoc {
     options.addStringOption('windowtitle',  'Ldap/Otp Java Client API Specification')
     options.addStringOption('header',  '<b>Ldap/Otp Api </b><br><font size="-1">v2.0</font>')
     options.addStringOption('bottom',  '<font size="-1"><a href="https://github.com/meier/ldapotp-java-api/issues/">Submit a bug or feature</a><br><br>Java is a trademark or registered trademark of Oracle and/or its affiliates. in the US and other countries.<br>Copyright 1993-1999 Oracle and/or its affiliates. 901 San Antonio Road,<br>Palo Alto, California, 94303, U.S.A. All rights reserved.</font>')
     options.addStringOption('doctitle',  '"Ldap/Otp Client Interface<sup><font size="-2">TM</font></sup>v2.0 API Specification"')
     options.addStringOption('overview',  'src/main/java/overview.html')

 }

artifacts {
    archives sourcesJar
    archives javadocJar
    archives fatJar
}
